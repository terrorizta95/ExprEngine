// Generated from MatlabGrammar.g4 by ANTLR 4.5.3

package io.lambdacloud.matlab;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MatlabGrammarLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ADD=17, 
		SUB=18, MUL=19, DIV=20, POW=21, SOL=22, DADD=23, DSUB=24, DMUL=25, DRDIV=26, 
		DLDIV=27, DPOW=28, AND=29, OR=30, NOT=31, TRUE=32, FALSE=33, GT=34, GE=35, 
		LT=36, LE=37, EQ=38, NEQ=39, NEQ2=40, SHL=41, SHR=42, USHR=43, INC=44, 
		DESC=45, ADD_ASSIGN=46, SUB_ASSIGN=47, MUL_ASSIGN=48, DIV_ASSIGN=49, REM_ASSIGN=50, 
		ASSIGN=51, LPAREN=52, RPAREN=53, LBRK=54, RBRK=55, LCB=56, RCB=57, END=58, 
		NARGIN=59, BAND=60, BOR=61, BXOR=62, BNOT=63, INTEGER=64, FLOAT=65, IDENTIFIER=66, 
		COMMA=67, COLON=68, SEMI=69, PERIOD=70, SQUOTE=71, DQUOTE=72, DPRIME=73, 
		COMMENT=74, SKIP_TOKEN=75, WS=76, StringLiteral=77;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "ADD", "SUB", 
		"MUL", "DIV", "POW", "SOL", "DADD", "DSUB", "DMUL", "DRDIV", "DLDIV", 
		"DPOW", "AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", "LT", "LE", "EQ", 
		"NEQ", "NEQ2", "SHL", "SHR", "USHR", "INC", "DESC", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "REM_ASSIGN", "ASSIGN", "LPAREN", "RPAREN", 
		"LBRK", "RBRK", "LCB", "RCB", "END", "NARGIN", "BAND", "BOR", "BXOR", 
		"BNOT", "INTEGER", "FLOAT", "IDENTIFIER", "COMMA", "COLON", "SEMI", "PERIOD", 
		"SQUOTE", "DQUOTE", "DPRIME", "COMMENT", "SKIP_TOKEN", "WS", "StringLiteral", 
		"Characters", "Character", "EscapeSeq"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'\n'", "'function'", "'if'", "'elseif'", "'else'", "'for'", "'in'", 
		"'while'", "'return'", "'switch'", "'case'", "'otherwise'", "'tic'", "'toc'", 
		"'''", "'@'", "'+'", "'-'", "'*'", "'/'", null, "'\\'", "'.+'", "'.-'", 
		"'.*'", "'./'", "'.\\'", null, null, null, null, "'true'", "'false'", 
		"'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'~='", "'<<'", "'>>'", 
		"'>>>'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'%='", "'='", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'end'", "'nargin'", "'&'", 
		"'|'", "'^'", "'~'", null, null, null, "','", "':'", "';'", "'.'", "'`'", 
		"'\"'", "'.''"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ADD", "SUB", "MUL", "DIV", "POW", "SOL", 
		"DADD", "DSUB", "DMUL", "DRDIV", "DLDIV", "DPOW", "AND", "OR", "NOT", 
		"TRUE", "FALSE", "GT", "GE", "LT", "LE", "EQ", "NEQ", "NEQ2", "SHL", "SHR", 
		"USHR", "INC", "DESC", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"REM_ASSIGN", "ASSIGN", "LPAREN", "RPAREN", "LBRK", "RBRK", "LCB", "RCB", 
		"END", "NARGIN", "BAND", "BOR", "BXOR", "BNOT", "INTEGER", "FLOAT", "IDENTIFIER", 
		"COMMA", "COLON", "SEMI", "PERIOD", "SQUOTE", "DQUOTE", "DPRIME", "COMMENT", 
		"SKIP_TOKEN", "WS", "StringLiteral"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MatlabGrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MatlabGrammar.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2O\u0205\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\3\2\3\2\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6"+
		"\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f"+
		"\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3"+
		"\16\3\17\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3"+
		"\24\3\25\3\25\3\26\3\26\3\26\5\26\u00ff\n\26\3\27\3\27\3\30\3\30\3\30"+
		"\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35"+
		"\3\35\3\35\3\35\5\35\u0117\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u011e\n"+
		"\36\3\37\3\37\3\37\3\37\5\37\u0124\n\37\3 \3 \3 \3 \5 \u012a\n \3!\3!"+
		"\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3&\3&\3&\3\'\3"+
		"\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3,\3-\3-\3-\3.\3."+
		"\3.\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3"+
		"\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3"+
		";\3;\3<\3<\3<\3<\3<\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3A\6A\u018b\nA\rA\16"+
		"A\u018c\3A\5A\u0190\nA\3B\7B\u0193\nB\fB\16B\u0196\13B\3B\3B\6B\u019a"+
		"\nB\rB\16B\u019b\3B\6B\u019f\nB\rB\16B\u01a0\3B\3B\7B\u01a5\nB\fB\16B"+
		"\u01a8\13B\5B\u01aa\nB\3C\3C\7C\u01ae\nC\fC\16C\u01b1\13C\3D\3D\3E\3E"+
		"\3F\3F\3G\3G\3H\3H\3I\3I\3J\3J\3J\3K\3K\3K\5K\u01c5\nK\3K\7K\u01c8\nK"+
		"\fK\16K\u01cb\13K\3K\5K\u01ce\nK\3K\3K\3L\6L\u01d3\nL\rL\16L\u01d4\3L"+
		"\3L\3L\3L\3L\7L\u01dc\nL\fL\16L\u01df\13L\3L\6L\u01e2\nL\rL\16L\u01e3"+
		"\5L\u01e6\nL\3L\3L\3M\3M\3N\3N\5N\u01ee\nN\3N\3N\3N\3N\5N\u01f4\nN\3N"+
		"\3N\5N\u01f8\nN\3O\6O\u01fb\nO\rO\16O\u01fc\3P\3P\5P\u0201\nP\3Q\3Q\3"+
		"Q\2\2R\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17"+
		"\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35"+
		"9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66"+
		"k\67m8o9q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG"+
		"\u008dH\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009bO\u009d\2\u009f"+
		"\2\u00a1\2\3\2\f\4\2##\u0080\u0080\3\2\62;\5\2C\\aac|\6\2\62;C\\aac|\4"+
		"\2\f\f\17\17\4\2\13\13\16\17\3\2\"\"\4\2\13\13\"\"\6\2\f\f$$^^bb\n\2$"+
		"$^^bbddhhppttvv\u021a\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2"+
		"\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2"+
		"\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2"+
		"Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3"+
		"\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2"+
		"\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2"+
		"w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2"+
		"\2\2\u0083\3\2\2\2\2\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u0089\3\2\2\2\2\u008b"+
		"\3\2\2\2\2\u008d\3\2\2\2\2\u008f\3\2\2\2\2\u0091\3\2\2\2\2\u0093\3\2\2"+
		"\2\2\u0095\3\2\2\2\2\u0097\3\2\2\2\2\u0099\3\2\2\2\2\u009b\3\2\2\2\3\u00a3"+
		"\3\2\2\2\5\u00a5\3\2\2\2\7\u00ae\3\2\2\2\t\u00b1\3\2\2\2\13\u00b8\3\2"+
		"\2\2\r\u00bd\3\2\2\2\17\u00c1\3\2\2\2\21\u00c4\3\2\2\2\23\u00ca\3\2\2"+
		"\2\25\u00d1\3\2\2\2\27\u00d8\3\2\2\2\31\u00dd\3\2\2\2\33\u00e7\3\2\2\2"+
		"\35\u00eb\3\2\2\2\37\u00ef\3\2\2\2!\u00f1\3\2\2\2#\u00f3\3\2\2\2%\u00f5"+
		"\3\2\2\2\'\u00f7\3\2\2\2)\u00f9\3\2\2\2+\u00fe\3\2\2\2-\u0100\3\2\2\2"+
		"/\u0102\3\2\2\2\61\u0105\3\2\2\2\63\u0108\3\2\2\2\65\u010b\3\2\2\2\67"+
		"\u010e\3\2\2\29\u0116\3\2\2\2;\u011d\3\2\2\2=\u0123\3\2\2\2?\u0129\3\2"+
		"\2\2A\u012b\3\2\2\2C\u0130\3\2\2\2E\u0136\3\2\2\2G\u0138\3\2\2\2I\u013b"+
		"\3\2\2\2K\u013d\3\2\2\2M\u0140\3\2\2\2O\u0143\3\2\2\2Q\u0146\3\2\2\2S"+
		"\u0149\3\2\2\2U\u014c\3\2\2\2W\u014f\3\2\2\2Y\u0153\3\2\2\2[\u0156\3\2"+
		"\2\2]\u0159\3\2\2\2_\u015c\3\2\2\2a\u015f\3\2\2\2c\u0162\3\2\2\2e\u0165"+
		"\3\2\2\2g\u0168\3\2\2\2i\u016a\3\2\2\2k\u016c\3\2\2\2m\u016e\3\2\2\2o"+
		"\u0170\3\2\2\2q\u0172\3\2\2\2s\u0174\3\2\2\2u\u0176\3\2\2\2w\u017a\3\2"+
		"\2\2y\u0181\3\2\2\2{\u0183\3\2\2\2}\u0185\3\2\2\2\177\u0187\3\2\2\2\u0081"+
		"\u018a\3\2\2\2\u0083\u01a9\3\2\2\2\u0085\u01ab\3\2\2\2\u0087\u01b2\3\2"+
		"\2\2\u0089\u01b4\3\2\2\2\u008b\u01b6\3\2\2\2\u008d\u01b8\3\2\2\2\u008f"+
		"\u01ba\3\2\2\2\u0091\u01bc\3\2\2\2\u0093\u01be\3\2\2\2\u0095\u01c4\3\2"+
		"\2\2\u0097\u01e5\3\2\2\2\u0099\u01e9\3\2\2\2\u009b\u01f7\3\2\2\2\u009d"+
		"\u01fa\3\2\2\2\u009f\u0200\3\2\2\2\u00a1\u0202\3\2\2\2\u00a3\u00a4\7\f"+
		"\2\2\u00a4\4\3\2\2\2\u00a5\u00a6\7h\2\2\u00a6\u00a7\7w\2\2\u00a7\u00a8"+
		"\7p\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa\7v\2\2\u00aa\u00ab\7k\2\2\u00ab"+
		"\u00ac\7q\2\2\u00ac\u00ad\7p\2\2\u00ad\6\3\2\2\2\u00ae\u00af\7k\2\2\u00af"+
		"\u00b0\7h\2\2\u00b0\b\3\2\2\2\u00b1\u00b2\7g\2\2\u00b2\u00b3\7n\2\2\u00b3"+
		"\u00b4\7u\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7\7h\2\2"+
		"\u00b7\n\3\2\2\2\u00b8\u00b9\7g\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb\7u"+
		"\2\2\u00bb\u00bc\7g\2\2\u00bc\f\3\2\2\2\u00bd\u00be\7h\2\2\u00be\u00bf"+
		"\7q\2\2\u00bf\u00c0\7t\2\2\u00c0\16\3\2\2\2\u00c1\u00c2\7k\2\2\u00c2\u00c3"+
		"\7p\2\2\u00c3\20\3\2\2\2\u00c4\u00c5\7y\2\2\u00c5\u00c6\7j\2\2\u00c6\u00c7"+
		"\7k\2\2\u00c7\u00c8\7n\2\2\u00c8\u00c9\7g\2\2\u00c9\22\3\2\2\2\u00ca\u00cb"+
		"\7t\2\2\u00cb\u00cc\7g\2\2\u00cc\u00cd\7v\2\2\u00cd\u00ce\7w\2\2\u00ce"+
		"\u00cf\7t\2\2\u00cf\u00d0\7p\2\2\u00d0\24\3\2\2\2\u00d1\u00d2\7u\2\2\u00d2"+
		"\u00d3\7y\2\2\u00d3\u00d4\7k\2\2\u00d4\u00d5\7v\2\2\u00d5\u00d6\7e\2\2"+
		"\u00d6\u00d7\7j\2\2\u00d7\26\3\2\2\2\u00d8\u00d9\7e\2\2\u00d9\u00da\7"+
		"c\2\2\u00da\u00db\7u\2\2\u00db\u00dc\7g\2\2\u00dc\30\3\2\2\2\u00dd\u00de"+
		"\7q\2\2\u00de\u00df\7v\2\2\u00df\u00e0\7j\2\2\u00e0\u00e1\7g\2\2\u00e1"+
		"\u00e2\7t\2\2\u00e2\u00e3\7y\2\2\u00e3\u00e4\7k\2\2\u00e4\u00e5\7u\2\2"+
		"\u00e5\u00e6\7g\2\2\u00e6\32\3\2\2\2\u00e7\u00e8\7v\2\2\u00e8\u00e9\7"+
		"k\2\2\u00e9\u00ea\7e\2\2\u00ea\34\3\2\2\2\u00eb\u00ec\7v\2\2\u00ec\u00ed"+
		"\7q\2\2\u00ed\u00ee\7e\2\2\u00ee\36\3\2\2\2\u00ef\u00f0\7)\2\2\u00f0 "+
		"\3\2\2\2\u00f1\u00f2\7B\2\2\u00f2\"\3\2\2\2\u00f3\u00f4\7-\2\2\u00f4$"+
		"\3\2\2\2\u00f5\u00f6\7/\2\2\u00f6&\3\2\2\2\u00f7\u00f8\7,\2\2\u00f8(\3"+
		"\2\2\2\u00f9\u00fa\7\61\2\2\u00fa*\3\2\2\2\u00fb\u00fc\7,\2\2\u00fc\u00ff"+
		"\7,\2\2\u00fd\u00ff\7`\2\2\u00fe\u00fb\3\2\2\2\u00fe\u00fd\3\2\2\2\u00ff"+
		",\3\2\2\2\u0100\u0101\7^\2\2\u0101.\3\2\2\2\u0102\u0103\7\60\2\2\u0103"+
		"\u0104\7-\2\2\u0104\60\3\2\2\2\u0105\u0106\7\60\2\2\u0106\u0107\7/\2\2"+
		"\u0107\62\3\2\2\2\u0108\u0109\7\60\2\2\u0109\u010a\7,\2\2\u010a\64\3\2"+
		"\2\2\u010b\u010c\7\60\2\2\u010c\u010d\7\61\2\2\u010d\66\3\2\2\2\u010e"+
		"\u010f\7\60\2\2\u010f\u0110\7^\2\2\u01108\3\2\2\2\u0111\u0112\7\60\2\2"+
		"\u0112\u0113\7,\2\2\u0113\u0117\7,\2\2\u0114\u0115\7\60\2\2\u0115\u0117"+
		"\7`\2\2\u0116\u0111\3\2\2\2\u0116\u0114\3\2\2\2\u0117:\3\2\2\2\u0118\u0119"+
		"\7c\2\2\u0119\u011a\7p\2\2\u011a\u011e\7f\2\2\u011b\u011c\7(\2\2\u011c"+
		"\u011e\7(\2\2\u011d\u0118\3\2\2\2\u011d\u011b\3\2\2\2\u011e<\3\2\2\2\u011f"+
		"\u0120\7q\2\2\u0120\u0124\7t\2\2\u0121\u0122\7~\2\2\u0122\u0124\7~\2\2"+
		"\u0123\u011f\3\2\2\2\u0123\u0121\3\2\2\2\u0124>\3\2\2\2\u0125\u0126\7"+
		"p\2\2\u0126\u0127\7q\2\2\u0127\u012a\7v\2\2\u0128\u012a\t\2\2\2\u0129"+
		"\u0125\3\2\2\2\u0129\u0128\3\2\2\2\u012a@\3\2\2\2\u012b\u012c\7v\2\2\u012c"+
		"\u012d\7t\2\2\u012d\u012e\7w\2\2\u012e\u012f\7g\2\2\u012fB\3\2\2\2\u0130"+
		"\u0131\7h\2\2\u0131\u0132\7c\2\2\u0132\u0133\7n\2\2\u0133\u0134\7u\2\2"+
		"\u0134\u0135\7g\2\2\u0135D\3\2\2\2\u0136\u0137\7@\2\2\u0137F\3\2\2\2\u0138"+
		"\u0139\7@\2\2\u0139\u013a\7?\2\2\u013aH\3\2\2\2\u013b\u013c\7>\2\2\u013c"+
		"J\3\2\2\2\u013d\u013e\7>\2\2\u013e\u013f\7?\2\2\u013fL\3\2\2\2\u0140\u0141"+
		"\7?\2\2\u0141\u0142\7?\2\2\u0142N\3\2\2\2\u0143\u0144\7#\2\2\u0144\u0145"+
		"\7?\2\2\u0145P\3\2\2\2\u0146\u0147\7\u0080\2\2\u0147\u0148\7?\2\2\u0148"+
		"R\3\2\2\2\u0149\u014a\7>\2\2\u014a\u014b\7>\2\2\u014bT\3\2\2\2\u014c\u014d"+
		"\7@\2\2\u014d\u014e\7@\2\2\u014eV\3\2\2\2\u014f\u0150\7@\2\2\u0150\u0151"+
		"\7@\2\2\u0151\u0152\7@\2\2\u0152X\3\2\2\2\u0153\u0154\7-\2\2\u0154\u0155"+
		"\7-\2\2\u0155Z\3\2\2\2\u0156\u0157\7/\2\2\u0157\u0158\7/\2\2\u0158\\\3"+
		"\2\2\2\u0159\u015a\7-\2\2\u015a\u015b\7?\2\2\u015b^\3\2\2\2\u015c\u015d"+
		"\7/\2\2\u015d\u015e\7?\2\2\u015e`\3\2\2\2\u015f\u0160\7,\2\2\u0160\u0161"+
		"\7?\2\2\u0161b\3\2\2\2\u0162\u0163\7\61\2\2\u0163\u0164\7?\2\2\u0164d"+
		"\3\2\2\2\u0165\u0166\7\'\2\2\u0166\u0167\7?\2\2\u0167f\3\2\2\2\u0168\u0169"+
		"\7?\2\2\u0169h\3\2\2\2\u016a\u016b\7*\2\2\u016bj\3\2\2\2\u016c\u016d\7"+
		"+\2\2\u016dl\3\2\2\2\u016e\u016f\7]\2\2\u016fn\3\2\2\2\u0170\u0171\7_"+
		"\2\2\u0171p\3\2\2\2\u0172\u0173\7}\2\2\u0173r\3\2\2\2\u0174\u0175\7\177"+
		"\2\2\u0175t\3\2\2\2\u0176\u0177\7g\2\2\u0177\u0178\7p\2\2\u0178\u0179"+
		"\7f\2\2\u0179v\3\2\2\2\u017a\u017b\7p\2\2\u017b\u017c\7c\2\2\u017c\u017d"+
		"\7t\2\2\u017d\u017e\7i\2\2\u017e\u017f\7k\2\2\u017f\u0180\7p\2\2\u0180"+
		"x\3\2\2\2\u0181\u0182\7(\2\2\u0182z\3\2\2\2\u0183\u0184\7~\2\2\u0184|"+
		"\3\2\2\2\u0185\u0186\7`\2\2\u0186~\3\2\2\2\u0187\u0188\7\u0080\2\2\u0188"+
		"\u0080\3\2\2\2\u0189\u018b\t\3\2\2\u018a\u0189\3\2\2\2\u018b\u018c\3\2"+
		"\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018f\3\2\2\2\u018e"+
		"\u0190\7N\2\2\u018f\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0082\3\2"+
		"\2\2\u0191\u0193\t\3\2\2\u0192\u0191\3\2\2\2\u0193\u0196\3\2\2\2\u0194"+
		"\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0197\3\2\2\2\u0196\u0194\3\2"+
		"\2\2\u0197\u0199\7\60\2\2\u0198\u019a\t\3\2\2\u0199\u0198\3\2\2\2\u019a"+
		"\u019b\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01aa\3\2"+
		"\2\2\u019d\u019f\t\3\2\2\u019e\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0"+
		"\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a6\7\60"+
		"\2\2\u01a3\u01a5\t\3\2\2\u01a4\u01a3\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6"+
		"\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2"+
		"\2\2\u01a9\u0194\3\2\2\2\u01a9\u019e\3\2\2\2\u01aa\u0084\3\2\2\2\u01ab"+
		"\u01af\t\4\2\2\u01ac\u01ae\t\5\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01b1\3\2"+
		"\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u0086\3\2\2\2\u01b1"+
		"\u01af\3\2\2\2\u01b2\u01b3\7.\2\2\u01b3\u0088\3\2\2\2\u01b4\u01b5\7<\2"+
		"\2\u01b5\u008a\3\2\2\2\u01b6\u01b7\7=\2\2\u01b7\u008c\3\2\2\2\u01b8\u01b9"+
		"\7\60\2\2\u01b9\u008e\3\2\2\2\u01ba\u01bb\7b\2\2\u01bb\u0090\3\2\2\2\u01bc"+
		"\u01bd\7$\2\2\u01bd\u0092\3\2\2\2\u01be\u01bf\7\60\2\2\u01bf\u01c0\7)"+
		"\2\2\u01c0\u0094\3\2\2\2\u01c1\u01c2\7\61\2\2\u01c2\u01c5\7\61\2\2\u01c3"+
		"\u01c5\7\'\2\2\u01c4\u01c1\3\2\2\2\u01c4\u01c3\3\2\2\2\u01c5\u01c9\3\2"+
		"\2\2\u01c6\u01c8\n\6\2\2\u01c7\u01c6\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9"+
		"\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2"+
		"\2\2\u01cc\u01ce\7\2\2\3\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce"+
		"\u01cf\3\2\2\2\u01cf\u01d0\bK\2\2\u01d0\u0096\3\2\2\2\u01d1\u01d3\t\7"+
		"\2\2\u01d2\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4"+
		"\u01d5\3\2\2\2\u01d5\u01e6\3\2\2\2\u01d6\u01d7\7\60\2\2\u01d7\u01d8\7"+
		"\60\2\2\u01d8\u01d9\7\60\2\2\u01d9\u01dd\3\2\2\2\u01da\u01dc\t\b\2\2\u01db"+
		"\u01da\3\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2"+
		"\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e2\t\6\2\2\u01e1"+
		"\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2"+
		"\2\2\u01e4\u01e6\3\2\2\2\u01e5\u01d2\3\2\2\2\u01e5\u01d6\3\2\2\2\u01e6"+
		"\u01e7\3\2\2\2\u01e7\u01e8\bL\2\2\u01e8\u0098\3\2\2\2\u01e9\u01ea\t\t"+
		"\2\2\u01ea\u009a\3\2\2\2\u01eb\u01ed\5\u008fH\2\u01ec\u01ee\5\u009dO\2"+
		"\u01ed\u01ec\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0"+
		"\5\u008fH\2\u01f0\u01f8\3\2\2\2\u01f1\u01f3\5\u0091I\2\u01f2\u01f4\5\u009d"+
		"O\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5"+
		"\u01f6\5\u0091I\2\u01f6\u01f8\3\2\2\2\u01f7\u01eb\3\2\2\2\u01f7\u01f1"+
		"\3\2\2\2\u01f8\u009c\3\2\2\2\u01f9\u01fb\5\u009fP\2\u01fa\u01f9\3\2\2"+
		"\2\u01fb\u01fc\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u009e"+
		"\3\2\2\2\u01fe\u0201\n\n\2\2\u01ff\u0201\5\u00a1Q\2\u0200\u01fe\3\2\2"+
		"\2\u0200\u01ff\3\2\2\2\u0201\u00a0\3\2\2\2\u0202\u0203\7^\2\2\u0203\u0204"+
		"\t\13\2\2\u0204\u00a2\3\2\2\2\34\2\u00fe\u0116\u011d\u0123\u0129\u018c"+
		"\u018f\u0194\u019b\u01a0\u01a6\u01a9\u01af\u01c4\u01c9\u01cd\u01d4\u01dd"+
		"\u01e3\u01e5\u01ed\u01f3\u01f7\u01fc\u0200\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}